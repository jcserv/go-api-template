// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interface.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=internal/service/interface.go -destination=internal/test/mocks/service.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repository "github.com/jcserv/go-api-template/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockIBook is a mock of IBook interface.
type MockIBook struct {
	ctrl     *gomock.Controller
	recorder *MockIBookMockRecorder
	isgomock struct{}
}

// MockIBookMockRecorder is the mock recorder for MockIBook.
type MockIBookMockRecorder struct {
	mock *MockIBook
}

// NewMockIBook creates a new mock instance.
func NewMockIBook(ctrl *gomock.Controller) *MockIBook {
	mock := &MockIBook{ctrl: ctrl}
	mock.recorder = &MockIBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBook) EXPECT() *MockIBookMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockIBook) CreateBook(ctx context.Context, arg *repository.CreateBookParams) (*repository.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, arg)
	ret0, _ := ret[0].(*repository.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockIBookMockRecorder) CreateBook(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockIBook)(nil).CreateBook), ctx, arg)
}
