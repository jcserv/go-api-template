// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: book.sql

package repository

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO Book (title, author_id) VALUES ($1, $2) RETURNING id, title, author_id
`

type CreateBookParams struct {
	Title    string `json:"title"`
	AuthorID int32  `json:"author_id"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook, arg.Title, arg.AuthorID)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.AuthorID)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM Book WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBook, id)
	return err
}

const readBook = `-- name: ReadBook :one
SELECT id, title, author_id FROM Book WHERE id = $1
`

func (q *Queries) ReadBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, readBook, id)
	var i Book
	err := row.Scan(&i.ID, &i.Title, &i.AuthorID)
	return i, err
}

const readBooks = `-- name: ReadBooks :many
SELECT id, title, author_id FROM Book
`

func (q *Queries) ReadBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, readBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.ID, &i.Title, &i.AuthorID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :exec
UPDATE Book SET title = $1, author_id = $2 WHERE id = $3
`

type UpdateBookParams struct {
	Title    string `json:"title"`
	AuthorID int32  `json:"author_id"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.Exec(ctx, updateBook, arg.Title, arg.AuthorID, arg.ID)
	return err
}
